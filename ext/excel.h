/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 12 "xlsx.go"

#include <stdlib.h>
#include <types.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void printStr(char* str);
extern GoUint32 newFile();
extern GoUint32 openFile(char* filePath);
extern int newSheet(GoUint32 fileId, char* sheetNamcC);
extern void setSheetName(GoUint32 fileId, char* sheetNameC, char* targetSheetNameC);
extern str_arr* getSheetList(GoUint32 fileId);
extern char* getSheetName(GoUint32 fileId, GoInt index);
extern void closeFile(GoUint32 fileId);
extern void setSheetVisible(GoUint32 fileId, char* sheetNameC, int visible);
extern int getSheetVisible(GoUint32 fileId, char* sheetNameC);
extern void deleteSheet(GoUint32 fileId, char* sheetNameC);
extern void setCellValue(GoUint32 fileId, char* sheetNameC, int row, int col, void* value, GoInt typ);
extern char* getCellValue(GoUint32 fileId, char* sheetNameC, int row, int col);
extern struct str_arr2* getRows(GoUint32 fileId, char* sheetNameC);
extern void putRows(GoUint32 fileId, char* sheetNameC, struct str_arr2* rowsC);
extern void putRow(GoUint32 fileId, char* sheetNameC, GoInt rowIndex, str_arr* rowC);
extern void mergeCell(GoUint32 fileId, char* sheetNameC, GoInt startRow, GoInt startCol, GoInt endRow, GoInt endCol);
extern void unMergeCell(GoUint32 fileId, char* sheetNameC, GoInt startRow, GoInt startCol, GoInt endRow, GoInt endCol);
extern merge_cell_arr* getMergeCells(GoUint32 fileId, char* sheetNameC);
extern void save(GoUint32 fileId);
extern void saveAs(GoUint32 fileId, char* path);

#ifdef __cplusplus
}
#endif
